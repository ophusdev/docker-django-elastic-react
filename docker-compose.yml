version: '3.7'

services:
  es01:
    build:
      context: docker-config/elasticsearch/
      args:
        ELK_VERSION: $ELK_VERSION
    environment:
      - node.name=es01
      - cluster.name=es-docker-cluster
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - ELASTIC_USER=$ELASTIC_USER
      - ELASTIC_PASSWORD=$ELASTIC_PASSWORD
      - xpack.security.enabled=true
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - type: bind
        source: ./docker-config/elasticsearch/config/elasticsearch.yml
        target: /usr/share/elasticsearch/config/elasticsearch.yml
        read_only: true
      - type: volume
        source: elasticsearch
        target: /usr/share/elasticsearch/data
    ports:
      - 9200:9200
    networks:
      - elk

  logstash:
    build:
      context: docker-config/logstash/
      args:
        ELK_VERSION: $ELK_VERSION
    volumes:
      - type: bind
        source: ./docker-config/logstash/config/logstash.yml
        target: /usr/share/logstash/config/logstash.yml
        read_only: true
      - type: bind
        source: ./docker-config/logstash/pipelines.yml
        target: /usr/share/logstash/config/pipelines.yml
        read_only: true
      - type: bind
        source: ./docker-config/logstash/pipelines
        target: /usr/share/logstash/pipeline
        read_only: true
    ports:
      - "9600:9600"
    environment:
      LS_JAVA_OPTS: "-Xmx256m -Xms256m"
    networks:
      - elk
    depends_on:
     - es01
  
  #kibana:
  #  build:
  #    context: docker-config/kibana/
  #    args:
  #      ELK_VERSION: $ELK_VERSION
  #  environment:
  #    - ELASTICSEARCH_USERNAME=$ELASTIC_USER
  #    - ELASTICSEARCH_PASSWORD=$ELASTIC_PASSWORD
  #  volumes:
  #    - type: bind
  #      source: ./docker-config/kibana/config/kibana.yml
  #      target: /usr/share/kibana/config/kibana.yml
  #      read_only: true
  #  ports:
  #    - "5601:5601"
  #  networks:
  #    - elk
  #  depends_on:
  #    - es01

  backend:
    build: ./backend
    command: python3 /code/backend/manage.py runserver 0.0.0.0:8000
    volumes:
      - ./backend:/code/backend
      - ./.env:/code/backend/.env
    ports:
      - 8000:8000
    env_file:
      - .env
    networks:
      - elk
    depends_on:
      - es01
    
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    volumes:
      - '.:/app'
      - '/app/node_modules'
    ports:
      - 80:80
    environment:
      - CHOKIDAR_USEPOLLING=true
    depends_on:
      - backend

volumes:
  elasticsearch:

networks:
  elk:
    driver: bridge